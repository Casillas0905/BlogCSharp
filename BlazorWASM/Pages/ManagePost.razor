@page "/ManagePost"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@using System.Drawing
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IPostService PostService;
@inject IUserService userService;
@inject ILocationService LocationService;
@inject ICategoryService CategoryService;

<div class="background-image-container" xmlns="http://www.w3.org/1999/html">
    <div class="row justify-content-center align-items-center h-100">
        <div class="col-md-8">
            <div class="content-box">
                <h3 class="secondtitle">Manage post</h3>
                <div class="upload-bar">
                </div>
                <br/>
                <br/>
                <div class="photo-upload-container">
                    <!-- Add your photo upload input and logic here -->
                    <input  @bind="imageurl"  accept="image/*"  placeholder="@imageurl"/>
                    <div class="form-group">
                    </div>
                    <form class="post-form">
                        <div class="form-group mb-4"> <!-- Added margin-bottom to create more space between "Choose File" and title -->
                            <label for="postTitle">Title:</label>
                            <input type="text" @bind="postTitle" placeholder="@postTitle"/>
                        </div>

                        <div class="form-group">
                            <label for="postDescription">Description:</label>
                            <textarea type="text" @bind="postdescription" placeholder="@postdescription"></textarea>
                        </div>

                        <div class="form-group">
                            <label for="category">Category:</label>
                            <select @bind="category" name="category" id="category" class="form-control">
                                @foreach (Category category in categories)
                                {
                                    <option value="@category.Id">@category.category</option>
                                                                                         
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="location">Choose campus:</label>
                            <select @bind="location" name="location" id="location" class="form-control">
                                @foreach (Location location in locations)
                                {
                                    <option value="@location.Id">@location.location</option>
                                }
                            </select>
                        </div>

                        
                        @if (!string.IsNullOrEmpty(resultMsg))
                        {<label style="color: @color">@resultMsg</label>
                        }
                    </form>
                </div>
            </div>
        </div>
         </div>
</div>
<button @onclick="Update" class="btn btn-primary btn-create-post">Update Post</button>

@code {
    private string postTitle = "";
    private string postdescription = "";
    private Post post;
    private string resultMsg = "";
    private string imageurl = "";
    private IEnumerable<Location>? locations;
    private IEnumerable<Category>? categories;
    private int category;
    private int location;
    private string color;

    protected override async Task OnInitializedAsync()
    {
        post = await PostService.GetByIdAsync(PostService.id);
        postTitle = post.Title;
        postdescription = post.description;
        imageurl = post.imageUrl;
        locations = await LocationService.findAll();
        categories = await CategoryService.findAll();
        category = post.category;
        location = post.location;
    }

    private async Task Update()
    {
        resultMsg = "";
        if (string.IsNullOrEmpty(postTitle) || string.IsNullOrEmpty(postdescription))
        {
            resultMsg = "All fields must have a value";
            return;
        }

        try
        {
    //"Poner userid en create post"
            Post dto = new(PostService.id,userService.id , postTitle, postdescription, imageurl, category, location);
            await PostService.Update(dto);
            resultMsg = "Post update";
            color = "green";
        }
        catch (Exception e)
        {
            color = "red";
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }

}
