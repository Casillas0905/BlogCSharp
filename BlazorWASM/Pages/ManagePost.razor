@page "/ManagePost"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@using System.Drawing
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IPostService PostService;
@inject IUserService userService;
@inject ILocationService LocationService;
@inject ICategoryService CategoryService;
@attribute [Authorize]

<style>
 
  .secondtitle {
    text-align: center; 
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
   
  }
</style>

<div class="background-image-container">
    <div class="row justify-content-center align-items-center h-100">    
        <div class="col-md-8">
            <div class="content-box">
                <h3 class="secondtitle">Edit post</h3>                           
                <div class="upload-bar">
                    <a class="nav-item" >Add Photo</a>

                </div>

                <div class="photo-upload-container">
                    <input  @bind="imageurl" type="file" accept="image/*"  />
                </div>
                <br/>
                <form class="post-form">
                    <div class="form-group mb-4"> 
                        <label for="postTitle">Title:</label>
                        <input type="text" @bind="postTitle" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="postDescription">Description:</label>
                        <textarea @bind="postdescription" class="form-control" rows="4"></textarea>
                    </div>

                    <div class="form-group">
                        <label for="category">Category:</label>
                        <select @bind="category" name="category" id="category" class="form-control">
                            @foreach (Category category in categories)
                            {
                                <option value="@category.Id">@category.category</option>
                                                                                         
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="location">Choose campus:</label>
                        <select @bind="location" name="location" id="location" class="form-control">
                            @foreach (Location location in locations)
                            {
                                <option value="@location.Id">@location.location</option>
                                                                                                                         
                            }
                        </select>
                    </div>
                        
                    
                    @if (!string.IsNullOrEmpty(resultMsg))
                    {<label style="color: @color">@resultMsg</label>
                    }
                </form><button @onclick="Update" class=" btn btn-primary btn-create-post">Update Post</button> 
            </div>
        </div>
    </div>
</div>

@code {
    private string postTitle = "";
    private string postdescription = "";
    private Post post;
    private string resultMsg = "";
    private string imageurl = "";
    private IEnumerable<Location>? locations;
    private IEnumerable<Category>? categories;
    private int category;
    private int location;
    private string color;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? email;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private Task<User> users;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user2 = authState.User;
        isLoggedIn = user2.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user2.Claims;
        email = user2.Identity!.Name!;
        users=userService.GetUserByEmail(email);  
        post = await PostService.GetByIdAsync(PostService.id);
        postTitle = post.Title;
        postdescription = post.description;
        imageurl = post.imageUrl;
        locations = await LocationService.findAll();
        categories = await CategoryService.findAll();
        category = post.category;
        location = post.location;
    }

    private async Task Update()
    {
        resultMsg = "";
        if (string.IsNullOrEmpty(postTitle) || string.IsNullOrEmpty(postdescription))
        {
            resultMsg = "All fields must have a value";
            return;
        }

        try
        {
    //"Poner userid en create post"
            Post dto = new(PostService.id,userService.id , postTitle, postdescription, imageurl, category, location);
            await PostService.Update(dto);
            resultMsg = "Post update";
            color = "green";
        }
        catch (Exception e)
        {
            color = "red";
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }

}
