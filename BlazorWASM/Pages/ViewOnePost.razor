@page "/ViewOnePost"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@inject IPostService postService;
@inject IUserService userService;
@inject ICommentService commentService;
@inject ICategoryService categoryService;
@attribute [Authorize]


<div class="blog-single gray-bg">
    <div class="container">
        <div class="row align-items-start">
            <div class="col-lg-8 m-15px-tb">
                <article class="article">
                    <div class="article-img">
                       
                      
                        <img src=@imageurl title="" alt="">
                    </div>
                    <div class="article-title"><div class="post">
                            <div class="article-title"><div class="menu"> 
                                    <div class="dots-menu">
                                        <div class="dot"></div>
                                        <div class="dot"></div>
                                        <div class="dot"></div>
                                    </div>
                                    <ul class="options">
                                        <li><a href="#" onclick="savePost()">Save</a></li>
                                        <li><a href="#" onclick="reportPost()">Report</a></li>
                                    </ul>
                                </div> 
                            </div>
                            <h2>@title</h2>
                      
                        
                        </div>
                        <div class="media">
                            <div class="avatar">
                            </div>
                            <div class="media-body">
                                <label>@category</label>
                                <button  class="button2" >Follow</button>
                            </div>
                        </div>
                      
                    </div>
                    <div class="article-content">
                        <p>@description</p>
                    </div>
                    
                </article>
                <div class="contact-form article-comment">
                    <h4>Leave a Comment</h4>
                    <form id="contact-form" >
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <textarea name="commment" id="comment" @bind="comment" placeholder="Your comment *" rows="4" class="form-control"></textarea>
                                    <br/>
                                   
                                </div>
                            </div>
                            
                                                    
                            
                                                                                                       
                        </div>
                    </form> <div class="col-md-12">
                                     <button class=" btn btn-secondary btn-create-post" @onclick="AddMessage"><span>Submit</span></button>                               
                                    </div>      
                    </div>
            </div>
            
            <div class="col-lg-4 m-15px-tb blog-aside">
                <!-- Author -->
                <div class="widget widget-author">
                    <div class="widget-title">
                        <h3>Author</h3>
                    </div>
                    <div class="widget-body">
                        <div class="media align-items-center">
                    <div class="avatar">
                    <img src="https://th.bing.com/th/id/OIP.117vgAXQTcpc5HVAn4RC4wHaHY?pid=ImgDet&rs=1" title="" alt="">    
                    </div>                       
                            <br/>
                            <div class="media-body">
                                <h6>@user.FirstName @user.LastName</h6>
                            </div>
                        </div>
                        
                    </div>
                </div>
                <!-- End Author -->
                <!-- Trending Post -->
            </div>
        </div>
    </div>
        </div>

<br/>
<h4> Comments </h4>
<br/>
<br/>

<div class="container bootstrap snippets bootdey">
       <div class="row">
   		<div class="col-md-12">
   		    <div class="blog-comment">
              @foreach (Comment comment in comments)
              {
                 
                  <ul class="comments">
                      <li class="clearfix">
                          <img src="https://bootdey.com/img/Content/user_1.jpg" class="avatar" alt="">
                          <div class="post-comments">
                              <p class="meta">User @comment.UserId says : <i class="pull-right"><a href="#"></a></i></p>
                              <p>
                                  @comment.message
                              </p>
                          </div>
                      </li>
                  </ul>
              }
   			</div>
   		</div>
   	</div>
   </div>
            

@code {

    private string msg = "";
    private string color = "";
    Post post;
    Category categories;
    User user;
    private string title;
    private string category;
    private string description;
    private string imageurl;
    private string comment;
    private IEnumerable<Comment>? comments;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? email;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private Task<User> users;

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user2 = authState.User;
            isLoggedIn = user2.Identity != null;
        
            if (!isLoggedIn) return;
        
            userClaims = user2.Claims;
            email = user2.Identity!.Name!;
            users=userService.GetUserByEmail(email);  
            
            post = await postService.GetByIdAsync(postService.id);
            title = post.Title;
            description = post.description;
            categories = await categoryService.findById(post.category);
            user = await userService.findById(post.userID);
            category =categories.category;
            imageurl = post.imageUrl;
            comments = await commentService.GetByPostIdAsync(post.Id);
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
   
    
    public async Task AddMessage()
    {
        msg = "";
        
        try
        {
            Comment dto = new Comment(comment,0,post.Id,userService.id);
            await commentService.CreateAsync(dto);
            comment = "";
            color = "green";
            msg = "Post created";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }

    }
}