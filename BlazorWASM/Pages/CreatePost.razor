@page "/CreatePost"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@using System.Drawing
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IPostService PostService;
@inject IUserService userService;
@inject ILocationService LocationService;
@inject ICategoryService CategoryService;
@attribute [Authorize]



    <div class="row justify-content-center align-items-center h-100">    
        <div class="col-md-8">
            <div class="thetext">
    <h3 class="secondtitle">Create post</h3>
                
                <p class="item" >Add Photo</p>
                
                <input  @bind="imageurl" placeholder="Insert image url" />
                
               
     <br/>
      <br/>                          
                
                <form class="context">
                    <div class="form-group mb-4"> 
                        <label for="postTitle">Title:</label>
                        <input type="text" @bind="postTitle" class="form-control" />
                    </div>

                    <div class="context">
                        <label for="postDescription">Description:</label>
                        <textarea @bind="postdescription" class="form-control" rows="4"></textarea>
                    </div>

                    <div class="context">
                        <label for="category">Category:</label>
                        <select @bind="category" name="category" id="category" class="form-control">
                            @foreach (Category category in categories)
                            {
                                <option value="@category.Id">@category.category</option>
                                                                                         
                            }
                        </select>
                    </div>

                    <div class="context">
                        <label for="location">Choose campus:</label>
                        <select @bind="location" name="location" id="location" class="form-control">
                            @foreach (Location location in locations)
                            {
                                <option value="@location.Id">@location.location</option>
                                                                                                                         
                            }
                        </select>
                    </div>
                        
                    
                    @if (!string.IsNullOrEmpty(resultMsg))
                    {<label style="color: @color">@resultMsg</label>
                    }
                </form><button @onclick="Create" class=" btn btn-primary create">Create Post</button> 
            </div>
        </div>
    </div>




@code {
    private int? selectedUserId;
    private string postTitle = "";
    private string postdescription = "";
    private int category ;
    private string resultMsg = "";
    private int location ;
    private string color = "";
    private string imageurl = "";
    private IEnumerable<Location>? locations;
    private IEnumerable<Category>? categories;
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? email;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private Task<User> users;



    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user2 = authState.User;
        isLoggedIn = user2.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user2.Claims;
        email = user2.Identity!.Name!;
        users=userService.GetUserByEmail(email);  
        
        
        locations = await LocationService.findAll();
        categories = await CategoryService.findAll();
    }

    private async Task Create()
    {
        resultMsg = "";
        if (string.IsNullOrEmpty(postTitle)||string.IsNullOrEmpty(postdescription))
        {
            color = "red";
            resultMsg = "All fields must have a value";
            return;
        }

        try
        {
            //"Poner userid en create post"
            Post dto = new(0,userService.id,postTitle,postdescription,imageurl,category,location);
            await PostService.CreateAsync(dto);
            postTitle = "";
            postdescription = "";
            imageurl = "";
            color = "green";
            resultMsg = "Post created";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
        }
    }
}