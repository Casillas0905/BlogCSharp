@page "/CreatePost"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using Domain.DTOs
@using System.Drawing
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IPostService PostService;
@inject IUserService userService
@inject IJSRuntime JSRuntime

<h3 class="maintitle">Create a post</h3>



<input type="button" class="boldText" value="Bold">
<input type="button" class="italicText" value="Italic">
<input type="button" class="underlineText" value="Underline">

<div class="title">
    <label>Title:</label>
    <input type="text" @bind="postTitle" class="input-box" />
</div>
        
<div class="description">
    <label>Description:</label>
    <div class="container" @bind="postdescription" contentEditable>
            
    </div>
</div>
        
<form name="form1" id="form1" action="/action_page.php">
    Category: <select @bind="category" name="subject" id="subject">
        <option value="1" selected="selected">Homework</option>
        <option value="2" selected="selected">Advice</option>
    </select>
    <br><br></form>

<form name="form1" id="form1" action="/action_page.php">
    Choose campus: <select @bind="location" name="subject" id="subject">
        <option value="Horsens" selected="selected">Horsens</option>
        <option value="Viborg" selected="selected">Viborg</option>
        <option value="Aarhus" selected="selected">Aarhus</option>
    </select>
    <br><br></form>
        
    

<div class="button-row">
    @if (!string.IsNullOrEmpty(msg))
    {
        <label style="color : @color">@msg</label>
    }
    <button @onclick="Create1" class="acceptbtn">Post</button>
</div>


@code {
    private Task<IEnumerable<User>> users;
    private int? selectedUserId;
    private string postTitle = "";
    private string postdescription = "";
    private int category ;
    private string IsOption1Selected="";
    private string IsOption2Selected="";
    private string IsOption3Selected="";
    private string msg = "";
    private int location;
    private string color = "";
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? name;
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;


    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
        name = user.Identity!.Name!;
       // users=userService.GetUsers(name);
    }

    private async Task Create1()
    {
        msg = "";
        if (string.IsNullOrEmpty(postTitle))
        {
            color = "red";
            msg = "Title cannot be empty!";
            return;
        }

        try
        {
            //"Poner userid en create post"
            Post dto = new(0,1,postTitle,postdescription,"imagen",category,location);
            await PostService.CreateAsync(dto);
            postTitle = "";
            postdescription = "";
            color = "green";
            msg = "Post created";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}